/**
 * 
 */
package fr.ign.cogit.cartagen.agents.cartacom.agent;

import java.util.Set;

import fr.ign.cogit.cartagen.agents.cartacom.conversation.ConversationTransition;
import fr.ign.cogit.cartagen.agents.cartacom.conversation.FSMBasedOnGoingConversation;
import fr.ign.cogit.cartagen.agents.cartacom.conversation.Message;
import fr.ign.cogit.cartagen.agents.cartacom.conversation.OnGoingConversation;
import fr.ign.cogit.cartagen.agents.cartacom.conversation.Performative;
import fr.ign.cogit.cartagen.agents.cartacom.conversation.TransitionExecutionException;
import fr.ign.cogit.cartagen.agents.core.task.Task;
import fr.ign.cogit.cartagen.agents.core.task.TryActionTask;

/**
 * An object capable of having conversations (dialogs) following pre-established
 * dialog scenarios. More precisely, it is able to
 * <ul>
 * <li>receive a message sent by another conversational object,</li>
 * <li>initiate a conversation by sending a message to another conversational
 * object in the context of a task, and</li>
 * <li>handle the messages it receives (by analysing them, acting according to
 * them and answering to them.</li>
 * </ul>
 * 
 * @author CDuchene
 * 
 */
public interface ConversationalObject {

  /**
   * Gets the task handled by this conversational object
   * @return the tasks
   */
  Set<Task> getTasks();

  /**
   * Setter for tasks.
   * @param tasks the set of tasks to set
   */
  void setTasks(Set<Task> tasks);

  /**
   * Adds a Task to tasks, and updates the reverse reference from the added Task
   * to {@code this}.
   * @param task the task to add
   */
  void addTask(Task task);

  /**
   * Receives a message sent by another conversational object (by adding it in
   * its 'mail box', whatever the form in which this mail box is implemented).
   * Typically, a conversational object CO that wants to send a message to
   * {@code this} should trigger this method on {@code this} with itself (CO) as
   * first parameter.
   * @param partner The conversational object that sent the message
   * @param message The message to receive
   */
  void receiveMessage(ConversationalObject partner, Message message);

  /**
   * Begins a conversation with another conversational object, with a first
   * message composed of a given performative and argument. WARNING if the
   * conversation is initiated in the context of a task, use
   * {@link #initiateConversation(ConversationalObject, Performative, Object, Task)}
   * instead.
   * @param partner The conversational object with which the conversation takes
   *          place
   * @param performative The performative of the first message
   * @param argument The argument of the first message. At this level it is
   *          defined as an {@code Object}, but its actual type should depend on
   *          the implementation of the interface {@link Message} actually
   *          returned by the method composeMessage.
   */
  void initiateConversation(ConversationalObject partner,
      Performative performative, Object argument);

  /**
   * Begins a conversation with another conversational object in the context of
   * a task (i.e. the conversation is generated by the task), with a first
   * message composed of a given performative and argument.
   * @param partner The conversational object with which the conversation takes
   *          place
   * @param performative The performative of the first message
   * @param argument The argument of the first message. At this level it is
   *          defined as an {@code Object}, but its actual type should depend on
   *          the implementation of the interface {@link Message} actually
   *          returned by the method composeMessage.
   * @param task the task in the context of which the conversation is initiated.
   */
  void initiateConversation(ConversationalObject partner,
      Performative performative, Object argument, Task task);

  /**
   * Handles the received messages by analysing them, acting according to them
   * and answering to them if needed.
   */
  void handleReceivedMessages();

  /**
   * Sends a message to another conversational object in the context of an
   * on-going conversation. To send a message that initiates a new conversation,
   * {@link #initiateConversation()} should be used instead.
   * @param partner The conversational object to which the message is to be sent
   * @param message The message to send
   */
  void sendMessage(ConversationalObject partner, Message message);

  // TODO Cette methode peut peut-être être gardée seeulement au niveau de la
  // classe FSMBasedConversationalObject, et rendue protected (elle ne devrait
  // être appelée que par initiateConversation et executeTransition.

  /**
   * Enables this conversational object to identify or generate new tasks that
   * could be aggregated with a {@code TryActionTask} task that is currently
   * being aggregated.
   * @param taskInitiatingAggregation the task of this conversational object
   *          that is being aggregated
   * @param tasksIdentifiedForAggregation the tasks of this conversational
   *          object that have already been identified as aggregable with this
   *          task
   * @return a set of (possibly new) tasks of this conversational object that
   *         could also be aggregated with {@code taskInitiatingAggregation}
   */
  Set<TryActionTask> getAdditionalTasksToAggregate(
      TryActionTask taskInitiatingAggregation,
      Set<TryActionTask> tasksIdentifiedForAggregation);

  /**
   * Return all the on going conversation for this conversational object.
   * @return
   */
  Set<OnGoingConversation> getOnGoingConversations();

  void executeTransitionInConversation(FSMBasedOnGoingConversation onGoingConv,
      ConversationTransition transition, Object argument)
      throws TransitionExecutionException;

  Set<Task> getGeneratedTasks();

  /**
   * Clears all the information related to previous conversations. Useful when
   * CartACom needs to be triggered more than once with the same agents.
   */
  public void clearConversations();
}
