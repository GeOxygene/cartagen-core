package fr.ign.cogit.cartagen.agents.cartacom.conversation;

import fr.ign.cogit.cartagen.agents.cartacom.agent.ConversationalObject;
import fr.ign.cogit.cartagen.agents.core.task.Task;
import fr.ign.cogit.cartagen.agents.core.task.TaskWithinConversation;

/**
 * For a {@link ConversationalObject}, describes a conversation it is taking
 * part into, from its point of view. It normally refers to a preestablished
 * dialog scenario that enables to know how the conversation can go on from its
 * current state. It holds a reference to the other conversational object taking
 * part to the conversation (known as {@code partner}).
 * <p>
 * An {@code OnGoingConversation} is identified by a {@code conversationId},
 * which uniquely describes the conversation (but depending on the
 * implementation, if a same conversation seen from the point of view of two
 * conversational objects is described by two distinct instances of
 * {@code OnGoingConversation} these two instances should have the same
 * {@code conversationId}.
 * <p>
 * A conversation can be generated by a {@link Task} of the agent: this task is
 * then registered as {@code dependentTask} on the conversation, which in turn
 * is registered as {@code generatedConversation} on the task. A conversation
 * can generate a task on the agent. The task is then a
 * {@code TaskWithinConversation} that is registered as {@code generatedTask} on
 * the conversation, and the conversation is in turn registered as
 * {@code dependentConversation} on the task.
 * @author CDuchene
 */
public interface OnGoingConversation {

  /**
   * Returns the identifier of this on-going conversation. It is shared with the
   * instance of <code>OnGoingConversation</code> describing the same
   * conversation from the point of view of the partner, if it not the same.
   * @return The identifier of the conversation
   */
  public long getConversationId();

  /**
   * Sets the identifier of this on-going conversation.
   * @param conversationId The conversationId to set
   */
  public void setConversationId(long conversationId);

  /**
   * Returns the partner of the conversational object in this conversation, i.e.
   * the conversation object with which the conversation takes place.
   * @return The partner
   */
  public ConversationalObject getPartner();

  /**
   * Sets the partner of the conversational object in this on-going
   * conversation.
   */
  public void setPartner(ConversationalObject partner);

  /**
   * Returns the task that has generated this conversation, if any.
   * @return a Task if the conversation has been generated by a task,
   *         <code>  null</code> otherwise.
   */
  public Task getDependentTask();

  /**
   * Set the task that has generated this conversation.
   * @param dependentTask The dependent task to set.
   */
  public void setDependentTask(Task dependentTask);

  /**
   * Returns the task that has been generated by this conversation and of which
   * the conversation is therefore dependent, if any. Only one task can be
   * generated by a conversation at a time.
   * @return the currently generated task, or null if none.
   */
  public TaskWithinConversation getGeneratedTask();

  /**
   * Sets the task that has been generated by this conversation.
   */
  public void setGeneratedTask(TaskWithinConversation generatedTask);

  /**
   * Indicate if the conversation is over.
   * @return
   */
  public boolean isFinished();

}
